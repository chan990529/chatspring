import React, { useEffect, useState } from 'react';
import axios from 'axios';
import { Card, CardContent, Typography, Grid, TextField, useMediaQuery } from '@mui/material';

const ScriptStatus = () => {
  const [status, setStatus] = useState({
    status: 'Loading...',
    lastUpdateTime: 'N/A',
    details: 'N/A',
    error: null
  });

  useEffect(() => {
    const fetchStatus = () => {
      axios.get('/api/monitoring/status')
        .then((response) => {
          setStatus(response.data);
        })
        .catch((error) => {
          console.error('Failed to fetch script status:', error);
          setStatus((prevStatus) => ({
            ...prevStatus,
            error: 'Failed to fetch status'
          }));
        });
    };

    fetchStatus();
    const interval = setInterval(fetchStatus, 10000);

    return () => clearInterval(interval);
  }, []);

  return (
    <Card sx={{ marginBottom: 2 }}>
      <CardContent>
        <Typography variant="h5">연구소 통신상태</Typography>
        <Typography><strong>상태:</strong> {status.status}</Typography>
        <Typography><strong>최종 업데이트:</strong> {status.lastUpdateTime}</Typography>
        <Typography><strong>내용:</strong> {status.details}</Typography>
        {status.error && (
          <Typography color="error"><strong>Error:</strong> {status.error}</Typography>
        )}
      </CardContent>
    </Card>
  );
};

const VirtualTradeCard = ({ trade }) => (
  <Card
    sx={{
      marginBottom: 2,
      backgroundColor: trade.sellPrice1 ? 'lime' : '#add8e6', // 조건에 따라 카드 전체 배경색 설정
    }}
  >
    <CardContent>
      <Typography variant="h6"><strong>종목명:</strong> {trade.stockName}</Typography>
      {/* <Typography><strong>종목코드:</strong> {trade.stockCode}</Typography> */}
      <Typography><strong>평단가:</strong> {trade.buyPrice}</Typography>
      <Typography><strong>매수일:</strong> {new Date(trade.buyTime).toLocaleDateString('en-US', { dateStyle: 'short' })}</Typography>
      <Typography><strong>매수횟수:</strong> {trade.numBuys}</Typography>
      <Typography><strong>매매결과:</strong> {trade.tradeResult}</Typography>
      <Typography><strong>손절가:</strong> {trade.stopLossPrice}</Typography>
      <Typography><strong>조건식:</strong> {trade.conditionType}</Typography>
      <Typography><strong>1% 매도가:</strong> {trade.sellPrice1 ? trade.sellPrice1 : 'N/A'}</Typography>
      <Typography><strong>1% 경과시간:</strong> {trade.reachTime1}</Typography>
      <Typography><strong>2% 매도가:</strong> {trade.sellPrice2 ? trade.sellPrice2 : 'N/A'}</Typography>
      <Typography><strong>2% 경과시간:</strong> {trade.reachTime2}</Typography>
      <Typography><strong>3% 매도가:</strong> {trade.sellPrice3 ? trade.sellPrice3 : 'N/A'}</Typography>
      <Typography><strong>3% 경과시간:</strong> {trade.reachTime3}</Typography>
      {/* <Typography><strong>수익률:</strong> {trade.profitReason ? trade.profitReason : 'N/A'}</Typography> */}
    </CardContent>
  </Card>
);

const VirtualTradeTable = () => {
  const [virtualTrades, setVirtualTrades] = useState([]);
  const [searchQuery, setSearchQuery] = useState('');

  useEffect(() => {
    axios.get('/api/trades')
      .then(response => {
        setVirtualTrades(response.data);
      })
      .catch(error => {
        console.error('There was an error fetching the virtual trades!', error);
      });
  }, []);

  const filteredTrades = virtualTrades.filter(trade =>
    trade.stockName.toLowerCase().includes(searchQuery.toLowerCase())
  );

  return (
    <div>
      <TextField
        label="종목명 검색"
        variant="outlined"
        fullWidth
        margin="normal"
        value={searchQuery}
        onChange={(e) => setSearchQuery(e.target.value)}
      />
      {filteredTrades.length > 0 ? (
        filteredTrades.map((trade) => (
          <VirtualTradeCard key={trade.tradeId} trade={trade} />
        ))
      ) : (
        <Typography>해당 종목이 없습니다.</Typography>
      )}
    </div>
  );
};

const MonitoringAndTrades = () => {
  const isMobile = useMediaQuery('(max-width:600px)');

  return (
    <Grid container spacing={2} direction={isMobile ? 'column' : 'row'}>
      <Grid item xs={12} md={6}>
        <ScriptStatus />
      </Grid>
      <Grid item xs={12} md={6}>
        <VirtualTradeTable />
      </Grid>
    </Grid>
  );
};

export default MonitoringAndTrades;
